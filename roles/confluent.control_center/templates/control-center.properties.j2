# Control Center Configuration
{% from './roles/confluent.common/macros/sasl.j2' import sasl_krb5, sasl_plain, sasl_scram, sasl_plain_user, sasl_scram_user %}
{% from './roles/confluent.common/macros/connectstring.j2' import join_string, connection_string, connection_string_protocol %}
{% from './roles/confluent.common/macros/ccloud.j2' import ccloud_bootstrap_and_setting, ccloud_security_settings %}

confluent.controlcenter.rest.listeners={{control_center_http_protocol}}://{{control_center_listener_hostname}}:{{control_center_port}}
{% if control_center_ssl_enabled|bool %}
confluent.controlcenter.rest.ssl.keystore.location={{control_center_keystore_path}}
confluent.controlcenter.rest.ssl.keystore.password={{control_center_keystore_storepass}}
confluent.controlcenter.rest.ssl.key.password={{control_center_keystore_keypass}}
{% if control_center_ssl_mutual_auth_enabled|bool %}
confluent.controlcenter.rest.ssl.truststore.location={{control_center_truststore_path}}
confluent.controlcenter.rest.ssl.truststore.password={{control_center_truststore_storepass}}
{% endif %}
{# I should check if I can get https for control center enabled with these settings #}
{% endif %}

{% set cfg = control_center.properties %}
{% for key, value in cfg.items() %}
{{key}}={{value}}
{% endfor %}

# Kafka Brokers
{% if confluent_cloud_bootstrap | default('') | length %}
bootstrap.servers={{ confluent_cloud_bootstrap }}
confluent.metrics.topic.max.message.bytes=8388608
{{ ccloud_bootstrap_and_setting(confluent_cloud_bootstrap, apikey, apisecret, 'confluent.controlcenter.streams.') }}
{{ ccloud_security_settings(apikey, apisecret, 'confluent.monitoring.interceptor.') }}
{% else %}
bootstrap.servers={{ connection_string(groups['kafka_broker'], kafka_broker_listeners[control_center_kafka_listener_name]['port']) }}
confluent.controlcenter.streams.security.protocol={{kafka_broker_listeners[control_center_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
confluent.controlcenter.streams.ssl.truststore.location={{control_center_truststore_path}}
confluent.controlcenter.streams.ssl.truststore.password={{control_center_truststore_storepass}}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
confluent.controlcenter.streams.ssl.keystore.location={{control_center_keystore_path}}
confluent.controlcenter.streams.ssl.keystore.password={{control_center_keystore_storepass}}
confluent.controlcenter.streams.ssl.key.password={{control_center_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
confluent.controlcenter.streams.sasl.mechanism=PLAIN
confluent.controlcenter.streams.sasl.jaas.config={{ sasl_scram_user(sasl_plain_users.control_center) }}
{% endif %}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
confluent.controlcenter.streams.sasl.mechanism=GSSAPI
confluent.controlcenter.streams.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
confluent.controlcenter.streams.sasl.jaas.config={{ sasl_krb5(kerberos.keytab_dir, control_center_kerberos_keytab_path, control_center_kerberos_principal)}}
{% endif %}
{% if kafka_broker_listeners[control_center_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
confluent.controlcenter.streams.sasl.mechanism=SCRAM-SHA-256
confluent.controlcenter.streams.sasl.jaas.config={{ sasl_scram_user(sasl_scram_users.control_center) }}
{% endif %}
{% endif %}

{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
# Schema Registry Configuration
confluent.controlcenter.schema.registry.url={{ connection_string_protocol(schema_registry_http_protocol, groups['schema_registry'], schema_registry_listener_port) }}
{% if schema_registry_ssl_enabled|bool %}
confluent.controlcenter.schema.registry.ssl.truststore.location={{control_center_truststore_path}}
confluent.controlcenter.schema.registry.ssl.truststore.password={{control_center_truststore_storepass}}
confluent.controlcenter.schema.registry.ssl.keystore.location={{control_center_keystore_path}}
confluent.controlcenter.schema.registry.ssl.keystore.password={{control_center_keystore_storepass}}
confluent.controlcenter.schema.registry.ssl.key.password={{control_center_keystore_keypass}}
{% endif %}
{% endif %}
{# connect to Confluent Cloud schema registry #}
{% if confluent_cloud_schema_registry | default('') | length %}
confluent.controlcenter.schema.registry.basic.auth.credentials.source=USER_INFO
confluent.controlcenter.schema.registry.basic.auth.user.info={{sr_credentials.apikey}}:{{sr_credentials.apisecret}}
confluent.controlcenter.schema.registry.url={{ confluent_cloud_schema_registry }}
{% endif %}



{% set connect_servers = groups.get('kafka_connect', []) %}
{% if connect_servers %}
# Kafka Connect Configuration
{% if kafka_connect_cluster_ansible_group_names is defined %}
{% for ansible_group in kafka_connect_cluster_ansible_group_names %}
{% for host in groups[ansible_group] %}{% if loop.index == 1%}confluent.controlcenter.connect.{{ hostvars[host]['kafka_connect_group_id'] }}.cluster={% endif %}{% if loop.index > 1%},{% endif %}{{ kafka_connect_http_protocol }}://{{ host }}:{{ kafka_connect_rest_port }}{% endfor %}

{% endfor %}
{% else %}
confluent.controlcenter.connect.default.cluster={{ connection_string_protocol(kafka_connect_http_protocol, groups['kafka_connect'], kafka_connect_rest_port) }}
{% endif %}
{% endif %}

{% set ksql_servers = groups.get('ksql', []) %}
{% if ksql_servers and cfg.get('confluent.controlcenter.ksql.enable', 'false').lower() == 'true' %}
# KSQL Configuration
{% if ksql_cluster_ansible_group_names is defined %}
{% for ansible_group in ksql_cluster_ansible_group_names %}
{% for host in groups[ansible_group] %}{% if loop.index == 1%}confluent.controlcenter.ksql.{{ ansible_group }}.url={% endif %}{% if loop.index > 1%},{% endif %}{{ ksql_http_protocol }}://{{ host }}:{{ ksql_listener_port }}{% endfor %}

{% endfor %}
{% else %}
confluent.controlcenter.ksql.default.url={{ connection_string_protocol(ksql_http_protocol, groups['ksql'], ksql_listener_port) }}
{% endif %}
{% endif %}
