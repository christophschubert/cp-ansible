# Maintained by Ansible
{% from './roles/confluent.common/macros/sasl.j2' import sasl_krb5, sasl_plain, sasl_scram, sasl_plain_user, sasl_scram_user %}
{% from './roles/confluent.common/macros/connectstring.j2' import join_string, connection_string, connection_string_protocol %}
{% from './roles/confluent.common/macros/ccloud.j2' import ccloud_bootstrap_and_setting %}

{% for key, value in kafka_connect.properties.items() %}
{{key}}={{value}}
{% endfor %}


# Kafka Connect Configuration
listeners={{kafka_connect_http_protocol}}://0.0.0.0:{{kafka_connect_rest_port}}
rest.advertised.listener={{kafka_connect_http_protocol}}
rest.advertised.host.name={{inventory_hostname}}
rest.advertised.host.port={{kafka_connect_rest_port}}
{% if kafka_connect_ssl_enabled|bool %}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.keystore.location={{kafka_connect_keystore_path}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.keystore.password={{kafka_connect_keystore_storepass}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.key.password={{kafka_connect_keystore_keypass}}
{% if kafka_connect_ssl_mutual_auth_enabled|bool %}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.client.auth=false
listeners.{{kafka_connect_http_protocol|lower}}.ssl.truststore.location={{kafka_connect_truststore_path}}
listeners.{{kafka_connect_http_protocol|lower}}.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% endif %}
{% endif %}

# Kafka Broker Configuration
{% if confluent_cloud_bootstrap | default('') | length %}
{{ ccloud_bootstrap_and_setting(confluent_cloud_bootstrap, apikey, apisecret) }}
security.protocol=SASL_SSL
{% else %}
bootstrap.servers={{ connection_string(groups['kafka_broker'], kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']) }}
security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
ssl.truststore.location={{kafka_connect_truststore_path}}
ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
ssl.keystore.location={{kafka_connect_keystore_path}}
ssl.keystore.password={{kafka_connect_keystore_storepass}}
ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
sasl.mechanism=PLAIN
sasl.jaas.config={{ sasl_plain_user(sasl_plain_users.kafka_connect) }}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
sasl.mechanism=GSSAPI
sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
sasl.jaas.config={{ sasl_krb5(kerberos.keytab_dir, kafka_connect_kerberos_keytab_path, kafka_connect_kerberos_principal) }}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
sasl.mechanism=SCRAM-SHA-256
sasl.jaas.config={{ sasl_scram_user(sasl_scram_users.kafka_connect) }}
{% endif %}
{% endif %}

{% set schema_registries = groups.get('schema_registry', []) %}
{% if schema_registries %}
value.converter.schema.registry.url={{ connection_string_protocol(schema_registry_http_protocol, groups['schema_registry'], schema_registry_listener_port) }}
key.converter.schema.registry.url={{ connection_string_protocol(schema_registry_http_protocol, groups['schema_registry'], schema_registry_listener_port) }}
{% endif %}


# Connect Producer Configuration
{% if confluent_cloud_bootstrap | default('') | length %}
{{ccloud_bootstrap_and_setting(confluent_cloud_bootstrap, apikey, apisecret, 'producer.')}}
{% else %}
producer.bootstrap.servers={{ connection_string(groups['kafka_broker'], kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']) }}

producer.security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
producer.ssl.truststore.location={{kafka_connect_truststore_path}}
producer.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
producer.ssl.keystore.location={{kafka_connect_keystore_path}}
producer.ssl.keystore.password={{kafka_connect_keystore_storepass}}
producer.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
producer.sasl.mechanism=PLAIN
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
producer.sasl.mechanism=GSSAPI
producer.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
producer.sasl.mechanism=SCRAM-SHA-256
{% endif %}
{% endif %}

# Connect Consumer Configuration
{% if confluent_cloud_bootstrap | default('') | length %}
{{ccloud_bootstrap_and_setting(confluent_cloud_bootstrap, apikey, apisecret, 'consumer.')}}
{% else %}
consumer.bootstrap.servers={{ connection_string(groups['kafka_broker'], kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']) }}

consumer.security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
consumer.ssl.truststore.location={{kafka_connect_truststore_path}}
consumer.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
consumer.ssl.keystore.location={{kafka_connect_keystore_path}}
consumer.ssl.keystore.password={{kafka_connect_keystore_storepass}}
consumer.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
consumer.sasl.mechanism=PLAIN
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
consumer.sasl.mechanism=GSSAPI
consumer.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
consumer.sasl.mechanism=SCRAM-SHA-256
{% endif %}
{% endif %}

# Producer Monitoring Configuration
{% if confluent_cloud_bootstrap | default('') | length %}
{{ccloud_bootstrap_and_setting(confluent_cloud_bootstrap, apikey, apisecret, 'producer.confluent.monitoring.interceptor.')}}
{% else %}
producer.confluent.monitoring.interceptor.bootstrap.servers={{ connection_string(groups['kafka_broker'], kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']) }}

producer.confluent.monitoring.interceptor.security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
producer.confluent.monitoring.interceptor.ssl.truststore.location={{kafka_connect_truststore_path}}
producer.confluent.monitoring.interceptor.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
producer.confluent.monitoring.interceptor.ssl.keystore.location={{kafka_connect_keystore_path}}
producer.confluent.monitoring.interceptor.ssl.keystore.password={{kafka_connect_keystore_storepass}}
producer.confluent.monitoring.interceptor.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
producer.confluent.monitoring.interceptor.sasl.mechanism=PLAIN
producer.confluent.monitoring.interceptor.sasl.jaas.config={{ sasl_plain_user(sasl_plain_users.kafka_connect) }}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
producer.confluent.monitoring.interceptor.sasl.mechanism=GSSAPI
producer.confluent.monitoring.interceptor.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
producer.confluent.monitoring.interceptor.sasl.jaas.config={{ sasl_krb5(kerberos.keytab_dir, kafka_connect_kerberos_keytab_path, kafka_connect_kerberos_principal) }}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
producer.confluent.monitoring.interceptor.sasl.mechanism=SCRAM-SHA-256
producer.confluent.monitoring.interceptor.sasl.jaas.config={{ sasl_scram_user(sasl_scram_users.kafka_connect) }}
{% endif %}
{% endif %}

# Consumer Monitoring Configuration
{% if confluent_cloud_bootstrap | default('') | length %}
{{ccloud_bootstrap_and_setting(confluent_cloud_bootstrap, apikey, apisecret, 'consumer.confluent.monitoring.interceptor.')}}
{% else %}
consumer.confluent.monitoring.interceptor.bootstrap.servers={{ connection_string(groups['kafka_broker'], kafka_broker_listeners[kafka_connect_kafka_listener_name]['port']) }}

consumer.confluent.monitoring.interceptor.security.protocol={{kafka_broker_listeners[kafka_connect_kafka_listener_name] | kafka_protocol_defaults(sasl_protocol, ssl_enabled) }}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_enabled'] | default(ssl_enabled) | bool %}
consumer.confluent.monitoring.interceptor.ssl.truststore.location={{kafka_connect_truststore_path}}
consumer.confluent.monitoring.interceptor.ssl.truststore.password={{kafka_connect_truststore_storepass}}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['ssl_mutual_auth_enabled'] | default(ssl_mutual_auth_enabled) | bool %}
consumer.confluent.monitoring.interceptor.ssl.keystore.location={{kafka_connect_keystore_path}}
consumer.confluent.monitoring.interceptor.ssl.keystore.password={{kafka_connect_keystore_storepass}}
consumer.confluent.monitoring.interceptor.ssl.key.password={{kafka_connect_keystore_keypass}}
{% endif %}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'PLAIN' %}
consumer.confluent.monitoring.interceptor.sasl.mechanism=PLAIN
consumer.confluent.monitoring.interceptor.sasl.jaas.config={{ sasl_plain_user(sasl_plain_users.kafka_connect) }}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'GSSAPI' %}
consumer.confluent.monitoring.interceptor.sasl.mechanism=GSSAPI
consumer.confluent.monitoring.interceptor.sasl.kerberos.service.name={{kerberos_kafka_broker_primary}}
consumer.confluent.monitoring.interceptor.sasl.jaas.config={{ sasl_krb5(kerberos.keytab_dir, kafka_connect_kerberos_keytab_path, kafka_connect_kerberos_principal) }}
{% endif %}
{% if kafka_broker_listeners[kafka_connect_kafka_listener_name]['sasl_protocol'] | default(sasl_protocol) | normalize_sasl_protocol == 'SCRAM-SHA-256' %}
consumer.confluent.monitoring.interceptor.sasl.mechanism=SCRAM-SHA-256
consumer.confluent.monitoring.interceptor.sasl.jaas.config={{ sasl_scram_user(sasl_scram_users.kafka_connect) }}
{% endif %}
{% endif %}
